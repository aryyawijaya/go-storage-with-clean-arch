// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aryyawijaya/go-storage-with-clean-arch/util/test-helper (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/all_repo.go github.com/aryyawijaya/go-storage-with-clean-arch/util/test-helper Repo
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	entity "github.com/aryyawijaya/go-storage-with-clean-arch/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateBulkWithTx mocks base method.
func (m *MockRepo) CreateBulkWithTx(arg0 context.Context, arg1 []*entity.File, arg2 [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBulkWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBulkWithTx indicates an expected call of CreateBulkWithTx.
func (mr *MockRepoMockRecorder) CreateBulkWithTx(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulkWithTx", reflect.TypeOf((*MockRepo)(nil).CreateBulkWithTx), arg0, arg1, arg2)
}

// CreateWithTx mocks base method.
func (m *MockRepo) CreateWithTx(arg0 context.Context, arg1 *entity.File, arg2 []byte) (*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithTx indicates an expected call of CreateWithTx.
func (mr *MockRepoMockRecorder) CreateWithTx(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithTx", reflect.TypeOf((*MockRepo)(nil).CreateWithTx), arg0, arg1, arg2)
}

// DeleteBulkWithTx mocks base method.
func (m *MockRepo) DeleteBulkWithTx(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBulkWithTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBulkWithTx indicates an expected call of DeleteBulkWithTx.
func (mr *MockRepoMockRecorder) DeleteBulkWithTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBulkWithTx", reflect.TypeOf((*MockRepo)(nil).DeleteBulkWithTx), arg0, arg1)
}

// GetByName mocks base method.
func (m *MockRepo) GetByName(arg0 context.Context, arg1 string) (*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockRepoMockRecorder) GetByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockRepo)(nil).GetByName), arg0, arg1)
}

// GetByNames mocks base method.
func (m *MockRepo) GetByNames(arg0 context.Context, arg1 []string) ([]*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNames", arg0, arg1)
	ret0, _ := ret[0].([]*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNames indicates an expected call of GetByNames.
func (mr *MockRepoMockRecorder) GetByNames(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNames", reflect.TypeOf((*MockRepo)(nil).GetByNames), arg0, arg1)
}

// Update mocks base method.
func (m *MockRepo) Update(arg0 context.Context, arg1 *entity.File) (*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepoMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepo)(nil).Update), arg0, arg1)
}
