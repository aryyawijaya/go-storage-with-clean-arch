// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aryyawijaya/go-storage-with-clean-arch/db (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/aryyawijaya/go-storage-with-clean-arch/db Store
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/aryyawijaya/go-storage-with-clean-arch/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockStore) CreateFile(arg0 context.Context, arg1 *sqlc.CreateFileParams) (*sqlc.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockStoreMockRecorder) CreateFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockStore)(nil).CreateFile), arg0, arg1)
}

// CreateFileWithTx mocks base method.
func (m *MockStore) CreateFileWithTx(arg0 context.Context, arg1 *sqlc.CreateFileParams, arg2 func() error) (*sqlc.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileWithTx indicates an expected call of CreateFileWithTx.
func (mr *MockStoreMockRecorder) CreateFileWithTx(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileWithTx", reflect.TypeOf((*MockStore)(nil).CreateFileWithTx), arg0, arg1, arg2)
}

// CreateFiles mocks base method.
func (m *MockStore) CreateFiles(arg0 context.Context, arg1 []*sqlc.CreateFilesParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFiles", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFiles indicates an expected call of CreateFiles.
func (mr *MockStoreMockRecorder) CreateFiles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFiles", reflect.TypeOf((*MockStore)(nil).CreateFiles), arg0, arg1)
}

// CreateFilesWithTx mocks base method.
func (m *MockStore) CreateFilesWithTx(arg0 context.Context, arg1 []*sqlc.CreateFilesParams, arg2 func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilesWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFilesWithTx indicates an expected call of CreateFilesWithTx.
func (mr *MockStoreMockRecorder) CreateFilesWithTx(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilesWithTx", reflect.TypeOf((*MockStore)(nil).CreateFilesWithTx), arg0, arg1, arg2)
}

// DeleteFilesByNames mocks base method.
func (m *MockStore) DeleteFilesByNames(arg0 context.Context, arg1 []string) ([]*sqlc.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilesByNames", arg0, arg1)
	ret0, _ := ret[0].([]*sqlc.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilesByNames indicates an expected call of DeleteFilesByNames.
func (mr *MockStoreMockRecorder) DeleteFilesByNames(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesByNames", reflect.TypeOf((*MockStore)(nil).DeleteFilesByNames), arg0, arg1)
}

// DeleteFilesWithTx mocks base method.
func (m *MockStore) DeleteFilesWithTx(arg0 context.Context, arg1 []string, arg2 func([]*sqlc.File) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilesWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilesWithTx indicates an expected call of DeleteFilesWithTx.
func (mr *MockStoreMockRecorder) DeleteFilesWithTx(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilesWithTx", reflect.TypeOf((*MockStore)(nil).DeleteFilesWithTx), arg0, arg1, arg2)
}

// GetFileByName mocks base method.
func (m *MockStore) GetFileByName(arg0 context.Context, arg1 string) (*sqlc.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByName", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileByName indicates an expected call of GetFileByName.
func (mr *MockStoreMockRecorder) GetFileByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByName", reflect.TypeOf((*MockStore)(nil).GetFileByName), arg0, arg1)
}

// GetFileByNames mocks base method.
func (m *MockStore) GetFileByNames(arg0 context.Context, arg1 []string) ([]*sqlc.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByNames", arg0, arg1)
	ret0, _ := ret[0].([]*sqlc.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileByNames indicates an expected call of GetFileByNames.
func (mr *MockStoreMockRecorder) GetFileByNames(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByNames", reflect.TypeOf((*MockStore)(nil).GetFileByNames), arg0, arg1)
}

// UpdateFile mocks base method.
func (m *MockStore) UpdateFile(arg0 context.Context, arg1 *sqlc.UpdateFileParams) (*sqlc.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockStoreMockRecorder) UpdateFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockStore)(nil).UpdateFile), arg0, arg1)
}
